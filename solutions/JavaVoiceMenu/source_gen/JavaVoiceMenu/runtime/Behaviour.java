package JavaVoiceMenu.runtime;

/*Generated by MPS */

import java.awt.event.ActionEvent;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

public class Behaviour {

  public static void runLogic(ActionEvent evt, boolean repeat) throws IOException {
    Variables.voice.stop();
    // Initilization of voice output 
    Boolean wrongButtonPressed = false;
    // Variable to store which character was pressed 
    String character = evt.getActionCommand();
    // Checking if correct option was pressed. If so Variables.path is updated 

    if (!(Variables.possibleOptList.contains(character)) && repeat == false) {
      String charToRead;
      if (character == "*") {
        charToRead = "star ";
      } else if (character == "#") {
        charToRead = "hash";
      } else {
        charToRead = character;
      }

      Variables.voice.addText(charToRead + "is a bad option. please try again");
      wrongButtonPressed = true;
    } else {
      if (!(repeat)) {
        Variables.path = Variables.path + character;

      }
    }

    System.out.println(Variables.path);
    // Loading next Event according to what is specified in "Variables.path" 
    Event currentEvent = Variables.myHashMap.get(Variables.path);
    // Checking if "back" option was selected via name of the current event 
    System.out.println(currentEvent.action);
    if (!(isEmptyString(currentEvent.action))) {
      System.out.println(currentEvent.action);
      if (currentEvent.action.equals("back")) {
        // updating Variables.path to get back 
        Variables.voice.addText("Going to the previous menu");
        Variables.path = Variables.path.substring(0, Variables.path.length() - 2);
        // loading previous event 
      } else
      if (currentEvent.action.equals("call")) {
        Variables.voice.addText("Direct call has begun");
        Variables.voice.addText("Calling our operator, who'll assist you");
        Style.setTextToScreen("Direct Call");
        Variables.finished = currentEvent.isFinal;
      } else
      if (currentEvent.action.equals("getInfo")) {
        Variables.voice.addText(currentEvent.toast);
        Variables.voice.addText("Getting you the latest information");
        Style.setTextToScreen("Getting Informations");
        Variables.finished = currentEvent.isFinal;

      } else
      if (currentEvent.action.equals("other")) {
        Variables.voice.addText(currentEvent.toast);
        Variables.voice.addText("You've entered section of Other Services");
        Style.setTextToScreen("Other Services");
        Variables.finished = currentEvent.isFinal;

      } else if (currentEvent.action.equals("hangUp")) {
        Variables.voice.addText(currentEvent.toast);
        Variables.voice.addText("Phone call ended");
        Style.setTextToScreen("End of Call");
        Variables.finished = currentEvent.isFinal;

      } else if (currentEvent.action.equals("record")) {
        Variables.voice.addText(currentEvent.toast);
        Style.setTextToScreen("Recording");
        Variables.voice.addText("After beep start speaking beep");
        Variables.voice.speak();
        try {
          TimeUnit.SECONDS.sleep(5);
        } catch (Exception e) {
        }
        Variables.voice.addText("Succesfully recorded");
      } else if (currentEvent.action.equals("repeat")) {
        Variables.voice.addText("Repeating possible options");
        Variables.path = Variables.path.substring(0, Variables.path.length() - 1);
      }
      Variables.finished = currentEvent.isFinal;
      System.out.println(currentEvent.name + " + " + currentEvent.isFinal);
      if (Variables.finished) {
        Variables.voice.speak();
        Style.setTextToScreen("PhoneCall finished");
        return;
      } else {
        if (!(currentEvent.action.equals("back")) && !(currentEvent.action.equals("repeat"))) {
          Variables.path = Variables.path.substring(0, Variables.path.length() - 1);
        }
        currentEvent = Variables.myHashMap.get(Variables.path);
      }
      Style.setTextToScreen(currentEvent.action);
    }
    Style.setTextToScreen(currentEvent.name);
    // Handling voice output 
    if (wrongButtonPressed == false) {
      Variables.voice.addText(currentEvent.toast);
    }
    Variables.voice.addText("Choose from this menu");
    // Delete all the previous possible options 
    Variables.possibleOptList.clear();
    // Proposing possible options consisting of next events 
    for (Event child : currentEvent.childs) {
      String trigger;
      if (child.trigger == "*") {
        trigger = " star";
      } else if (child.trigger == "#") {
        trigger = " hash";
      } else {
        trigger = child.trigger;
      }

      Variables.voice.addText(" For " + child.name + " press " + trigger + " ");
      if (!(child.isFinal)) {
        Variables.voice.addText(",");
      }
      Variables.possibleOptList.add(child.trigger);
    }
    Variables.voice.speak();
  }
  public static void runInitSetup() {
    // Static first iteration of Voicemenu 
    // declaring first possible following characters 
    Event currentEvent = Variables.myHashMap.get("0");
    for (Event item : currentEvent.childs) {
      Variables.possibleOptList.add(item.trigger);
    }
    // Itialization of voice output 
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}

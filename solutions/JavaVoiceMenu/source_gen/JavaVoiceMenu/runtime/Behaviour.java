package JavaVoiceMenu.runtime;

/*Generated by MPS */

import java.awt.event.ActionEvent;
import com.sun.speech.freetts.VoiceManager;
import com.sun.speech.freetts.Voice;

public class Behaviour {
  public static void runLogic(ActionEvent evt) {
    // Initilization of voice output 

    VoiceManager vm = VoiceManager.getInstance();
    Voice myVoice = vm.getVoice("kevin16");
    myVoice.allocate();

    // Variable to store which character was pressed 
    String character = evt.getActionCommand();

    // Checking if correct option was pressed. If so Variables.path is updated 
    if (!(Variables.possibleOptList.contains(character))) {
      myVoice.speak(character + "is a bad option. please try again");
    } else {
      Variables.path = Variables.path + character;
    }

    System.out.println(Variables.path);


    // Loading next Event according to what is specified in "Variables.path" 
    Event currentEvent = Variables.myHashMap.get(Variables.path);

    // Checking if "back" option was selected via name of the current event 

    if (!(isEmptyString(currentEvent.action))) {
      if (currentEvent.action.equals("back")) {
        // updating Variables.path to get back 
        myVoice.speak("Going to the previous menu");
        Variables.path = Variables.path.substring(0, Variables.path.length() - 2);
        // loading previous event 
        currentEvent = Variables.myHashMap.get(Variables.path);
      }
      Style.setTextToScreen(currentEvent.action);
    }

    Style.setTextToScreen(currentEvent.name);

    // Handling voice output 
    myVoice.speak(currentEvent.toast);
    myVoice.speak("Choose from");
    // Delete all the previous possible options 
    Variables.possibleOptList.clear();
    // Proposing possible options consisting of next events 
    for (Event child : currentEvent.childs) {
      myVoice.speak("For" + child.name + "press" + child.trigger);
      Variables.possibleOptList.add(child.trigger);
    }
  }
  public static void runInitSetup() {
    // Static first iteration of Voicemenu 
    // declaring first possible following characters 
    Event currentEvent = Variables.myHashMap.get("0");
    for (Event item : currentEvent.childs) {
      Variables.possibleOptList.add(item.trigger);
    }
    // Itialization of voice output 
    VoiceManager vm = VoiceManager.getInstance();
    Voice myVoice = vm.getVoice("kevin16");
    myVoice.allocate();
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}

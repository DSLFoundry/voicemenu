package JavaVoiceMenu.runtime;

/*Generated by MPS */

import java.awt.event.ActionEvent;
import java.io.IOException;

public class Behaviour {
  public static void runLogic(ActionEvent evt) throws IOException {
    // Initilization of voice output 
    Boolean wrongButtonPressed = false;
    // Variable to store which character was pressed 
    String character = evt.getActionCommand();
    // Checking if correct option was pressed. If so Variables.path is updated 
    if (!(Variables.possibleOptList.contains(character))) {
      Variables.voice.addText(character + "is a bad option. please try again");
      wrongButtonPressed = true;
    } else {
      Variables.path = Variables.path + character;
    }
    System.out.println(Variables.path);
    // Loading next Event according to what is specified in "Variables.path" 
    Event currentEvent = Variables.myHashMap.get(Variables.path);
    // Checking if "back" option was selected via name of the current event 
    if (!(isEmptyString(currentEvent.action))) {
      System.out.println(currentEvent.action);
      if (currentEvent.action.equals("back")) {
        // updating Variables.path to get back 
        Variables.voice.addText("Going to the previous menu");
        Variables.path = Variables.path.substring(0, Variables.path.length() - 2);
        // loading previous event 
        currentEvent = Variables.myHashMap.get(Variables.path);
      } else
      if (currentEvent.action.equals("call")) {
        Variables.voice.addText("Direct call has begun").speak();
        Style.setTextToScreen("Direct Call");
        Variables.finished = true;

        return;
      } else
      if (currentEvent.action.equals("getInfo")) {
        Variables.voice.addText("Now we are sending you super secret informations").speak();
        Style.setTextToScreen("Getting Informations");
        Variables.finished = true;
        return;
      } else
      if (currentEvent.action.equals("other")) {
        Variables.voice.addText("You just entered section of special services. Good Luck").speak();
        Style.setTextToScreen("Other Services");
        Variables.finished = true;
        return;
      }
      Style.setTextToScreen(currentEvent.action);
    }
    Style.setTextToScreen(currentEvent.name);
    // Handling voice output 
    if (wrongButtonPressed == false) {
      Variables.voice.addText(currentEvent.toast);
    }
    Variables.voice.addText("Choose from this menu");
    // Delete all the previous possible options 
    Variables.possibleOptList.clear();
    // Proposing possible options consisting of next events 
    for (Event child : currentEvent.childs) {

      String trigger;
      if (child.trigger == "*") {
        trigger = " star";
      } else if (child.trigger == "#") {
        trigger = " hash";
      } else {
        trigger = child.trigger;
      }

      Variables.voice.addText("For" + child.name + "press" + trigger);
      Variables.possibleOptList.add(child.trigger);
    }
    Variables.voice.speak();
  }
  public static void runInitSetup() {
    // Static first iteration of Voicemenu 
    // declaring first possible following characters 
    Event currentEvent = Variables.myHashMap.get("0");
    for (Event item : currentEvent.childs) {
      Variables.possibleOptList.add(item.trigger);
    }
    // Itialization of voice output 
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}

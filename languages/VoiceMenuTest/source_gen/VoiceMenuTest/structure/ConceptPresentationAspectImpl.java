package VoiceMenuTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Assert;
  private ConceptPresentation props_Command;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_Press;
  private ConceptPresentation props_StepEvaluation;
  private ConceptPresentation props_TestStep;
  private ConceptPresentation props_VoiceMenuTestCase;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Assert:
        if (props_Assert == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("assert");
          props_Assert = cpb.create();
        }
        return props_Assert;
      case LanguageConceptSwitch.Command:
        if (props_Command == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Command = cpb.create();
        }
        return props_Command;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<empty line>");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.Press:
        if (props_Press == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("press");
          props_Press = cpb.create();
        }
        return props_Press;
      case LanguageConceptSwitch.StepEvaluation:
        if (props_StepEvaluation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StepEvaluation");
          props_StepEvaluation = cpb.create();
        }
        return props_StepEvaluation;
      case LanguageConceptSwitch.TestStep:
        if (props_TestStep == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestStep = cpb.create();
        }
        return props_TestStep;
      case LanguageConceptSwitch.VoiceMenuTestCase:
        if (props_VoiceMenuTestCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VoiceMenuTestCase = cpb.create();
        }
        return props_VoiceMenuTestCase;
    }
    return null;
  }
}

package jetbrains.mps.samples.VoiceMenuTabularEditor.editor;

/*Generated by MPS */

import jetbrains.mps.lang.editor.table.runtime.AbstractTableModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class VoiceMenuTable extends AbstractTableModel {

  private final SNode myNode;
  private final EditorContext myEditorContext;

  public VoiceMenuTable(SNode node, EditorContext cotext) {
    myNode = node;
    myEditorContext = cotext;
  }
  @Override
  public int getColumnCount() {
    return 1;
  }
  @Override
  public int getRowCount() {
    if (ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.events$gxkh)).any((it) -> Objects.equals(SPropertyOperations.getString(it, PROPS.trigger$DqFK), "X"))) {
      return SLinkOperations.getChildren(myNode, LINKS.events$gxkh).size();

    }
    return SLinkOperations.getChildren(myNode, LINKS.events$gxkh).size() + 1;
  }
  @Override
  public SNode getValueAt(int row, int column) {
    if ((row == 0) && (column == 0)) {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x250921d21a8746e5L, 0x90a9a2c74442cfa1L, 0x2c711bd01b0d4082L, "jetbrains.mps.samples.VoiceMenuTabularEditor.structure.Name"));
    }
    if (row >= 1 && (column == 0)) {
      return ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.events$gxkh)).getElement(row - 1);
    }
    return null;
  }
  @Override
  public void insertRow(int rowNumber) {
    SNodeFactoryOperations.addNewChild(myNode, LINKS.events$gxkh, null);
  }

  @Override
  public void deleteRow(int rowNumber) {
    SNodeOperations.deleteNode(ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.events$gxkh)).getElement(rowNumber));
  }


  private static final class LINKS {
    /*package*/ static final SContainmentLink events$gxkh = MetaAdapterFactory.getContainmentLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde308L, 0x5b6b060cf3fde688L, "events");
  }

  private static final class PROPS {
    /*package*/ static final SProperty trigger$DqFK = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL, 0x5b6b060cf3fde310L, "trigger");
  }
}

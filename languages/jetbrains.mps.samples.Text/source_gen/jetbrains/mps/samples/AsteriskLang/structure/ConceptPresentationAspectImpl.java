package jetbrains.mps.samples.AsteriskLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Argument;
  private ConceptPresentation props_Command;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_Context;
  private ConceptPresentation props_Empty;
  private ConceptPresentation props_Extend;
  private ConceptPresentation props_PlainText;
  private ConceptPresentation props_Same;
  private ConceptPresentation props_WorkSpace;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Argument:
        if (props_Argument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Argument");
          props_Argument = cpb.create();
        }
        return props_Argument;
      case LanguageConceptSwitch.Command:
        if (props_Command == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Command = cpb.create();
        }
        return props_Command;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Comment");
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.Context:
        if (props_Context == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Context = cpb.create();
        }
        return props_Context;
      case LanguageConceptSwitch.Empty:
        if (props_Empty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Empty");
          props_Empty = cpb.create();
        }
        return props_Empty;
      case LanguageConceptSwitch.Extend:
        if (props_Extend == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Extend = cpb.create();
        }
        return props_Extend;
      case LanguageConceptSwitch.PlainText:
        if (props_PlainText == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PlainText");
          props_PlainText = cpb.create();
        }
        return props_PlainText;
      case LanguageConceptSwitch.Same:
        if (props_Same == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Same = cpb.create();
        }
        return props_Same;
      case LanguageConceptSwitch.WorkSpace:
        if (props_WorkSpace == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WorkSpace = cpb.create();
        }
        return props_WorkSpace;
    }
    return null;
  }
}

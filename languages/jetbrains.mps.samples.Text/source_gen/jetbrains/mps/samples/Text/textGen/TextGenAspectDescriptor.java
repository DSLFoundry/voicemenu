package jetbrains.mps.samples.Text.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import jetbrains.mps.samples.Text.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.Body:
        return new Body_TextGen();
      case LanguageConceptSwitch.Comment:
        return new Comment_TextGen();
      case LanguageConceptSwitch.Context:
        return new Context_TextGen();
      case LanguageConceptSwitch.Empty:
        return new Empty_TextGen();
      case LanguageConceptSwitch.Extend:
        return new Extend_TextGen();
      case LanguageConceptSwitch.GoTo:
        return new GoTo_TextGen();
      case LanguageConceptSwitch.PlainText:
        return new PlainText_TextGen();
      case LanguageConceptSwitch.Same:
        return new Same_TextGen();
      case LanguageConceptSwitch.WorkSpace:
        return new WorkSpace_TextGen();
      case LanguageConceptSwitch.general1arg:
        return new general1arg_TextGen();
      case LanguageConceptSwitch.general2args:
        return new general2args_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(CONCEPTS.WorkSpace$MI)) {
        String fname = getFileName_WorkSpace(root);
        String ext = getFileExtension_WorkSpace(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
    }
  }
  private static String getFileName_WorkSpace(SNode node) {
    return SPropertyOperations.getString(node, PROPS.typeOfFile$czzn);
  }
  private static String getFileExtension_WorkSpace(SNode node) {
    return "conf";
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept WorkSpace$MI = MetaAdapterFactory.getConcept(0x914c58c4068049cfL, 0x8599f5ced7a657d6L, 0x10bb6449f9c963fcL, "jetbrains.mps.samples.Text.structure.WorkSpace");
  }

  private static final class PROPS {
    /*package*/ static final SProperty typeOfFile$czzn = MetaAdapterFactory.getProperty(0x914c58c4068049cfL, 0x8599f5ced7a657d6L, 0x10bb6449f9c963fcL, 0x757a4df10365e094L, "typeOfFile");
  }
}

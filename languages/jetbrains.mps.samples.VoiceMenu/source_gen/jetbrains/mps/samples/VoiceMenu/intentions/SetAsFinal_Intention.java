package jetbrains.mps.samples.VoiceMenu.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public final class SetAsFinal_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public SetAsFinal_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:d92c1500-00d3-4072-866a-5077893293b8(jetbrains.mps.samples.VoiceMenu.intentions)", "5461963470560281125"));
  }
  @Override
  public String getPresentation() {
    return "SetAsFinal";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    boolean flag = false;
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.DirectCall$zl)) {
      SNode myNode = SNodeOperations.cast(node, CONCEPTS.DirectCall$zl);
      flag = !(SPropertyOperations.getBoolean(myNode, PROPS.isFinal$bKXT));
    }
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.Other$zO)) {
      SNode myNode = SNodeOperations.cast(node, CONCEPTS.Other$zO);
      flag = !(SPropertyOperations.getBoolean(myNode, PROPS.isFinal$jv5i));
    }
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.Record$xQ)) {
      SNode myNode = SNodeOperations.cast(node, CONCEPTS.Record$xQ);
      flag = !(SPropertyOperations.getBoolean(myNode, PROPS.isFinal$w2re));
    }
    if (SNodeOperations.isInstanceOf(node, CONCEPTS.GetInfo$$M)) {
      SNode myNode = SNodeOperations.cast(node, CONCEPTS.GetInfo$$M);
      flag = !(SPropertyOperations.getBoolean(myNode, PROPS.isFinal$cFSh));
    }
    return flag;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Set as Final";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.DirectCall$zl)) {
        SNode myNode = SNodeOperations.cast(node, CONCEPTS.DirectCall$zl);
        SPropertyOperations.assign(myNode, PROPS.isFinal$bKXT, true);
      }
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.Other$zO)) {
        SNode myNode = SNodeOperations.cast(node, CONCEPTS.Other$zO);
        SPropertyOperations.assign(myNode, PROPS.isFinal$jv5i, true);
      }
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.Record$xQ)) {
        SNode myNode = SNodeOperations.cast(node, CONCEPTS.Record$xQ);
        SPropertyOperations.assign(myNode, PROPS.isFinal$w2re, true);
      }
      if (SNodeOperations.isInstanceOf(node, CONCEPTS.GetInfo$$M)) {
        SNode myNode = SNodeOperations.cast(node, CONCEPTS.GetInfo$$M);
        SPropertyOperations.assign(myNode, PROPS.isFinal$cFSh, true);
      }


    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return SetAsFinal_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DirectCall$zl = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac8L, "jetbrains.mps.samples.VoiceMenu.structure.DirectCall");
    /*package*/ static final SConcept Other$zO = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac9L, "jetbrains.mps.samples.VoiceMenu.structure.Other");
    /*package*/ static final SConcept Record$xQ = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x420d89797f0d16f6L, "jetbrains.mps.samples.VoiceMenu.structure.Record");
    /*package*/ static final SConcept GetInfo$$M = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980acbL, "jetbrains.mps.samples.VoiceMenu.structure.GetInfo");
  }

  private static final class PROPS {
    /*package*/ static final SProperty isFinal$bKXT = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac8L, 0x420d89797f56bce4L, "isFinal");
    /*package*/ static final SProperty isFinal$jv5i = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac9L, 0x420d89797f56bde6L, "isFinal");
    /*package*/ static final SProperty isFinal$w2re = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x420d89797f0d16f6L, 0x420d89797f56bd93L, "isFinal");
    /*package*/ static final SProperty isFinal$cFSh = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980acbL, 0x420d89797f56bd37L, "isFinal");
  }
}

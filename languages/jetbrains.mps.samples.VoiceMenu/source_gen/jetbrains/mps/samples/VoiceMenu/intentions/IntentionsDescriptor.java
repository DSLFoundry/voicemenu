package jetbrains.mps.samples.VoiceMenu.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionAspectDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends AbstractIntentionAspectDescriptor {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        if (true) {
          // concept 
          intentions = new IntentionFactory[10];
          intentions[0] = new changeToDirectCall_Intention();
          intentions[1] = new changeToOther_Intention();
          intentions[2] = new changeToBack_Intention();
          intentions[3] = new changeToGetInfo_Intention();
          intentions[4] = new changeToMenu_Intention();
          intentions[5] = new SetAsFinal_Intention();
          intentions[6] = new SetAsNonFinal_Intention();
          intentions[7] = new changeToHangUp_Intention();
          intentions[8] = new changeToRecord_Intention();
          intentions[9] = new changeToReplay_Intention();
        }
        break;
      case 1:
        if (true) {
          // concept 
          intentions = new IntentionFactory[6];
          intentions[0] = new Remove_Playback_Intention();
          intentions[1] = new InitializeNewEvent_Intention();
          intentions[2] = new RemoveActivityWithEvent_Intention();
          intentions[3] = new DeclareActivity_Intention();
          intentions[4] = new Add_Playback_Intention();
          intentions[5] = new ToFile_Intention();
        }
        break;
      case 2:
        if (true) {
          // concept 
          intentions = new IntentionFactory[5];
          intentions[0] = new RemoveEventWithActivity_Intention();
          intentions[1] = new Sort_Ascending_Intention();
          intentions[2] = new Sort_Descending_Intention();
          intentions[3] = new MoveUp_Intention();
          intentions[4] = new MoveDown_Intention();
        }
        break;
      case 3:
        if (true) {
          // concept 
          intentions = new IntentionFactory[2];
          intentions[0] = new Add_Playback_Timeout_Intention();
          intentions[1] = new Remove_Playback_Timeout_Intention();
        }
        break;
      case 4:
        if (true) {
          // concept 
          intentions = new IntentionFactory[8];
          intentions[0] = new Remove_Main_Playback_Intention();
          intentions[1] = new ViewAsTabular_Intention();
          intentions[2] = new ShowToolbar_Intention();
          intentions[3] = new Add_Main_Playback_Intention();
          intentions[4] = new SwitchGeneratorToHTML_Intention();
          intentions[5] = new SwitchGeneratorToXML_Intention();
          intentions[6] = new SwitchGeneratorToJavaSimulator_Intention();
          intentions[7] = new SwitchGeneratorToAsterisk_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[31];
    rv[0] = new Remove_Playback_Intention();
    rv[1] = new Remove_Main_Playback_Intention();
    rv[2] = new InitializeNewEvent_Intention();
    rv[3] = new changeToDirectCall_Intention();
    rv[4] = new changeToOther_Intention();
    rv[5] = new changeToBack_Intention();
    rv[6] = new changeToGetInfo_Intention();
    rv[7] = new changeToMenu_Intention();
    rv[8] = new ViewAsTabular_Intention();
    rv[9] = new ShowToolbar_Intention();
    rv[10] = new RemoveEventWithActivity_Intention();
    rv[11] = new Sort_Ascending_Intention();
    rv[12] = new Sort_Descending_Intention();
    rv[13] = new MoveUp_Intention();
    rv[14] = new MoveDown_Intention();
    rv[15] = new RemoveActivityWithEvent_Intention();
    rv[16] = new DeclareActivity_Intention();
    rv[17] = new SetAsFinal_Intention();
    rv[18] = new SetAsNonFinal_Intention();
    rv[19] = new changeToHangUp_Intention();
    rv[20] = new changeToRecord_Intention();
    rv[21] = new changeToReplay_Intention();
    rv[22] = new Add_Playback_Intention();
    rv[23] = new Add_Main_Playback_Intention();
    rv[24] = new ToFile_Intention();
    rv[25] = new SwitchGeneratorToHTML_Intention();
    rv[26] = new SwitchGeneratorToXML_Intention();
    rv[27] = new SwitchGeneratorToJavaSimulator_Intention();
    rv[28] = new SwitchGeneratorToAsterisk_Intention();
    rv[29] = new Add_Playback_Timeout_Intention();
    rv[30] = new Remove_Playback_Timeout_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d133997fdc5L), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0xbed5e5797b645b9L), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L)).seal();
}

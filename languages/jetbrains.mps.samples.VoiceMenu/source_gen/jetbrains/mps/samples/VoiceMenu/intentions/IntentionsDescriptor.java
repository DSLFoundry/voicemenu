package jetbrains.mps.samples.VoiceMenu.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionAspectDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends AbstractIntentionAspectDescriptor {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt_d0f = concept;
    switch (index_hphjzv_d0f.index(cncpt_d0f)) {
      case 0:
        if (true) {
          // Concept: Action 
          intentions = new IntentionFactory[5];
          intentions[0] = new changeToDirectCall_Intention();
          intentions[1] = new changeToOther_Intention();
          intentions[2] = new changeToBack_Intention();
          intentions[3] = new changeToGetInfo_Intention();
          intentions[4] = new changeToMenu_Intention();
        }
        break;
      case 1:
        if (true) {
          // Concept: Activity 
          intentions = new IntentionFactory[4];
          intentions[0] = new Add_Greeting_Intention();
          intentions[1] = new Remove_Greeting_Intention();
          intentions[2] = new InitializeNewEvent_Intention();
          intentions[3] = new AddUnDeclaredEvent_Intention();
        }
        break;
      case 2:
        if (true) {
          // Concept: Event 
          intentions = new IntentionFactory[2];
          intentions[0] = new AddEventDeclaration_Intention();
          intentions[1] = new RemoveEvent_Intention();
        }
        break;
      case 3:
        if (true) {
          // Concept: Menu 
          intentions = new IntentionFactory[4];
          intentions[0] = new changeMenuToBack_Intention();
          intentions[1] = new changeMenuToOther_Intention();
          intentions[2] = new changeMenuToGetInfo_Intention();
          intentions[3] = new changeMenuToDirectCall_Intention();
        }
        break;
      case 4:
        if (true) {
          // Concept: WorkSpace 
          intentions = new IntentionFactory[4];
          intentions[0] = new Add_Main_Greeting_Intention();
          intentions[1] = new Remove_Main_Greeting_Intention();
          intentions[2] = new ViewAsTabular_Intention();
          intentions[3] = new ShowToolbar_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[19];
    rv[0] = new Add_Main_Greeting_Intention();
    rv[1] = new Add_Greeting_Intention();
    rv[2] = new Remove_Greeting_Intention();
    rv[3] = new Remove_Main_Greeting_Intention();
    rv[4] = new InitializeNewEvent_Intention();
    rv[5] = new AddEventDeclaration_Intention();
    rv[6] = new changeToDirectCall_Intention();
    rv[7] = new changeToOther_Intention();
    rv[8] = new changeToBack_Intention();
    rv[9] = new changeToGetInfo_Intention();
    rv[10] = new changeMenuToBack_Intention();
    rv[11] = new changeMenuToOther_Intention();
    rv[12] = new changeMenuToGetInfo_Intention();
    rv[13] = new changeMenuToDirectCall_Intention();
    rv[14] = new changeToMenu_Intention();
    rv[15] = new ViewAsTabular_Intention();
    rv[16] = new ShowToolbar_Intention();
    rv[17] = new RemoveEvent_Intention();
    rv[18] = new AddUnDeclaredEvent_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex index_hphjzv_d0f = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d133997fdc5L), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde308L), MetaIdFactory.conceptId(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L)).seal();
}

package jetbrains.mps.samples.VoiceMenu.editor;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import java.io.File;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import java.nio.file.Files;
import java.nio.file.Paths;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.io.IOException;

public class Verify {
  private static final Logger LOG = LogManager.getLogger(Verify.class);
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.CLICK, new Verify.Verify_CLICK(node));
  }
  public static class Verify_CLICK extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Verify_CLICK(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      try {
        File currentDirectory = new File(new File(".").getAbsolutePath());
        LoggingRuntime.logMsgView(Level.INFO, currentDirectory.getCanonicalPath(), Verify.class, null, null);

        String path = System.getProperty("user.home") + "/MPS_ASTERISK";

        if (Files.exists(Paths.get(path))) {
          LoggingRuntime.logMsgView(Level.INFO, "File Exists", Verify.class, null, null);
          LoggingRuntime.logMsgView(Level.INFO, path, Verify.class, null, null);
        } else {
          new File(path).mkdir();
        }

        LoggingRuntime.logMsgView(Level.INFO, SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, 0x25806c66fbe600f7L, "playback")), Verify.class, null, null);

        if (Files.exists(Paths.get(path + "/" + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, 0x25806c66fbe600f7L, "playback"))))) {
          LoggingRuntime.logMsgView(Level.INFO, "Found", Verify.class, null, null);
        } else {
          LoggingRuntime.logMsgView(Level.INFO, "Not Found", Verify.class, null, null);
        }



      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }
}

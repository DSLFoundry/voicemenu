package jetbrains.mps.samples.VoiceMenu.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class DeleteEvtAndActv {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new DeleteEvtAndActv.DeleteEvtAndActv_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new DeleteEvtAndActv.DeleteEvtAndActv_BACKSPACE(node));
  }
  public static class DeleteEvtAndActv_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public DeleteEvtAndActv_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "\"delete Both Event and linked Activity";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode activity = SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL, 0x765e66b75f7bfee4L, "Activity"));
      SNodeOperations.deleteNode(activity);
      SNodeOperations.deleteNode(node);
    }
  }
  public static class DeleteEvtAndActv_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public DeleteEvtAndActv_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "\"delete Both Event and linked Activity";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode activity = SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL, 0x765e66b75f7bfee4L, "Activity"));
      SNodeOperations.deleteNode(activity);
      SNodeOperations.deleteNode(node);
    }
  }
}

package jetbrains.mps.samples.VoiceMenu.editor;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class RefreshFileTextRecognition_Timeout {
  private static final Logger LOG = LogManager.getLogger(RefreshFileTextRecognition_Timeout.class);
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.CLICK, new RefreshFileTextRecognition_Timeout.RefreshFileTextRecognition_Timeout_CLICK(node));
  }
  public static class RefreshFileTextRecognition_Timeout_CLICK extends AbstractCellAction {
    /*package*/ SNode myNode;
    public RefreshFileTextRecognition_Timeout_CLICK(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {

      String path = System.getProperty("user.home") + "/MPS_ASTERISK";

      if (!(Files.exists(Paths.get(path)))) {
        new File(path).mkdir();
      }

      path = System.getProperty("user.home") + "/MPS_ASTERISK";

      if (Files.exists(Paths.get(path))) {
      } else {
        new File(path).mkdir();
      }



      try {
        File tmp = new File(path + "/" + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0xbed5e5797b645b9L, 0x34fad0c9f5b34402L, "playback")));
        if (tmp.isFile()) {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0xbed5e5797b645b9L, 0x54e798cf44bec9edL, "PBisFile"), "" + (true));
          LoggingRuntime.logMsgView(Level.DEBUG, "Found -> File", RefreshFileTextRecognition_Timeout.class, null, null);
        } else {
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0xbed5e5797b645b9L, 0x54e798cf44bec9edL, "PBisFile"), "" + (false));
          LoggingRuntime.logMsgView(Level.DEBUG, "Not Found -> Text", RefreshFileTextRecognition_Timeout.class, null, null);
        }
      } catch (Exception e) {
        SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0xbed5e5797b645b9L, 0x54e798cf44bec9edL, "PBisFile"), "" + (false));
      }

      SelectionUtil.selectCell(editorContext, node, SelectionManager.FIRST_ERROR_CELL + "|" + SelectionManager.FOCUS_POLICY_CELL + "|" + SelectionManager.FIRST_EDITABLE_CELL + "|" + SelectionManager.FIRST_CELL);
    }
  }
}

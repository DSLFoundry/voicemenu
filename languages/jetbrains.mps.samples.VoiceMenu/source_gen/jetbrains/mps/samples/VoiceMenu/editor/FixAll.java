package jetbrains.mps.samples.VoiceMenu.editor;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.File;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class FixAll {
  private static final Logger LOG = LogManager.getLogger(FixAll.class);

  /*package*/ static AbstractCellAction createAction_CLICK(final SNode node) {
    return new AbstractCellAction() {
      public String getDescriptionText() {
        return "\"Fix all errors in code\"";
      }
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {

        while (true) {
          // ............................................................. replace duplicate numbers 
          List<SNode> events = SNodeOperations.getNodeDescendants(node, CONCEPTS.Event$dL, false, new SAbstractConcept[]{});
          for (final SNode item : ListSequence.fromList(events)) {

            boolean legalButton = false;
            String[] buttons = new String[12];

            buttons[0] = "0";
            buttons[1] = "1";
            buttons[2] = "2";
            buttons[3] = "3";
            buttons[4] = "4";
            buttons[5] = "5";
            buttons[6] = "6";
            buttons[7] = "7";
            buttons[8] = "8";
            buttons[9] = "9";
            buttons[10] = "#";
            buttons[11] = "*";

            for (String button : buttons) {
              if (Objects.equals(button, SPropertyOperations.getString(item, PROPS.trigger$zpYt))) {
                legalButton = true;
              }
            }
            if (legalButton == false) {
              LoggingRuntime.logMsgView(Level.INFO, "Button " + SPropertyOperations.getString(item, PROPS.trigger$zpYt) + " fixed", FixAll.class, null, null);
            }

            if (Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getAllSiblings(item, false), CONCEPTS.Event$dL)).any(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return Objects.equals(SPropertyOperations.getString(it, PROPS.trigger$zpYt), SPropertyOperations.getString(item, PROPS.trigger$zpYt));
              }
            }) || legalButton == false) {
              String[] kbButtons = new String[12];

              kbButtons[0] = "0";
              kbButtons[1] = "1";
              kbButtons[2] = "2";
              kbButtons[3] = "3";
              kbButtons[4] = "4";
              kbButtons[5] = "5";
              kbButtons[6] = "6";
              kbButtons[7] = "7";
              kbButtons[8] = "8";
              kbButtons[9] = "9";
              kbButtons[10] = "#";
              kbButtons[11] = "*";

              List<String> usedButtons = new ArrayList<String>();

              List<SNode> eventsDeclTable = SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(item), CONCEPTS.Menu$bP), LINKS.events$AIPs);

              for (SNode event : ListSequence.fromList(eventsDeclTable)) {
                ListSequence.fromList(usedButtons).addElement(SPropertyOperations.getString(event, PROPS.trigger$zpYt));
              }

              SPropertyOperations.assign(item, PROPS.trigger$zpYt, Sequence.fromIterable(Sequence.fromArray(kbButtons)).subtract(ListSequence.fromList(usedButtons)).first());
            }
          }



          // ............................................................. init events 

          List<SNode> descendants = SNodeOperations.getNodeDescendants(node, CONCEPTS.Event$dL, false, new SAbstractConcept[]{});
          for (final SNode event : ListSequence.fromList(descendants)) {
            if (isNotEmptyString(SPropertyOperations.getString(event, PROPS.name$tAp1)) && isNotEmptyString(SPropertyOperations.getString(event, PROPS.trigger$zpYt))) {
              if (Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getChildren(SNodeOperations.getParent(event)), CONCEPTS.Activity$oQ)).any(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.event$gjCV), PROPS.name$tAp1) == SPropertyOperations.getString(event, PROPS.name$tAp1) && Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.event$gjCV), PROPS.trigger$zpYt), SPropertyOperations.getString(event, PROPS.trigger$zpYt));
                }
              })) {
              } else {
                LoggingRuntime.logMsgView(Level.INFO, "Set Up " + SPropertyOperations.getString(event, PROPS.name$tAp1), FixAll.class, null, null);
                SNode newActivity = SLinkOperations.addNewChild(SNodeOperations.cast(SNodeOperations.getParent(event), CONCEPTS.Menu$bP), LINKS.activities$AJ0_, CONCEPTS.Activity$oQ);
                SNodeFactoryOperations.setNewChild(newActivity, LINKS.commands$giUr, CONCEPTS.Other$87);
                SLinkOperations.setTarget(newActivity, LINKS.event$gjCV, event);
                ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(SNodeOperations.getParent(event), CONCEPTS.Menu$bP), LINKS.activities$AJ0_)).addElement(newActivity);
              }
            }
          }
          // ............................................................. remove empty 
          if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Activity$oQ, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return (SLinkOperations.getTarget(it, LINKS.event$gjCV) == null);
            }
          })) {
            LoggingRuntime.logMsgView(Level.INFO, "Remove Empty Activity", FixAll.class, null, null);
            SNodeOperations.deleteNode(ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Activity$oQ, false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return (SLinkOperations.getTarget(it, LINKS.event$gjCV) == null);
              }
            }));

          } else if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Command$a6, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SNodeOperations.isInstanceOf(it, CONCEPTS.Empty$vd);
            }
          })) {
            // replace empty 
            SNode emptyCommand = ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Command$a6, false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.isInstanceOf(it, CONCEPTS.Empty$vd);
              }
            });
            SNodeFactoryOperations.replaceWithNewChild(emptyCommand, CONCEPTS.Other$87);

          } else if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Menu$bP, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return (ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.events$AIPs)).isEmpty() || Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(it, LINKS.activities$AJ0_), LINKS.commands$giUr)).isEmpty()) && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(it), CONCEPTS.WorkSpace$ao));
            }
          })) {
            // replace menu 

            SNode emptyMenu = ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Menu$bP, false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return (ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.events$AIPs)).isEmpty() || Sequence.fromIterable(SLinkOperations.collect(SLinkOperations.getChildren(it, LINKS.activities$AJ0_), LINKS.commands$giUr)).isEmpty()) && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(it), CONCEPTS.WorkSpace$ao));
              }
            });

            SNodeFactoryOperations.replaceWithNewChild(SNodeOperations.cast(SNodeOperations.getParent(emptyMenu), CONCEPTS.Activity$oQ), CONCEPTS.Activity$oQ);

            LoggingRuntime.logMsgView(Level.INFO, "Init Empty Menu", FixAll.class, null, null);
          } else if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Event$dL, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return isEmptyString(SPropertyOperations.getString(it, PROPS.name$tAp1));
            }
          })) {
            LoggingRuntime.logMsgView(Level.INFO, "Remove Event With Empty Name", FixAll.class, null, null);
            SNodeOperations.deleteNode(ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Event$dL, false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return isEmptyString(SPropertyOperations.getString(it, PROPS.name$tAp1));
              }
            }));

          } else if (ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Event$dL, false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return isEmptyString(SPropertyOperations.getString(it, PROPS.trigger$zpYt));
            }
          })) {

            LoggingRuntime.logMsgView(Level.INFO, "Remove Event With Empty Trigger", FixAll.class, null, null);
            SNodeOperations.deleteNode(ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Event$dL, false, new SAbstractConcept[]{})).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return isEmptyString(SPropertyOperations.getString(it, PROPS.trigger$zpYt));
              }
            }));

          } else {
            break;
          }
        }
        // ............................................................. Init Main Menu 

        if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.bodyMenu$8UCv), LINKS.events$AIPs)).isEmpty() || ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.bodyMenu$8UCv), LINKS.activities$AJ0_)).isEmpty()) {

          SNode newActivity = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, "jetbrains.mps.samples.VoiceMenu.structure.Activity"));
          SNode newEvent = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL, "jetbrains.mps.samples.VoiceMenu.structure.Event"));

          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.bodyMenu$8UCv), LINKS.events$AIPs)).clear();
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.bodyMenu$8UCv), LINKS.activities$AJ0_)).clear();

          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.bodyMenu$8UCv), LINKS.activities$AJ0_)).addElement(newActivity);
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, LINKS.bodyMenu$8UCv), LINKS.events$AIPs)).addElement(newEvent);
          SLinkOperations.setTarget(newActivity, LINKS.event$gjCV, newEvent);
          LoggingRuntime.logMsgView(Level.INFO, "Init Main Menu", FixAll.class, null, null);
        }
        // ............................................................. remove Duplicate Actions 

        List<SNode> duplicateMenus = SNodeOperations.getNodeDescendants(node, CONCEPTS.Menu$bP, false, new SAbstractConcept[]{});

        Iterable<SNode> activities = SLinkOperations.collectMany(duplicateMenus, LINKS.activities$AJ0_);
        for (final SNode currentActivity : Sequence.fromIterable(activities)) {

          Iterable<SNode> siblings = SNodeOperations.ofConcept(SNodeOperations.getAllSiblings(currentActivity, false), CONCEPTS.Activity$oQ);

          if (Sequence.fromIterable(siblings).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return !(Objects.equals(it, currentActivity)) && Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.event$gjCV), PROPS.trigger$zpYt), SPropertyOperations.getString(SLinkOperations.getTarget(currentActivity, LINKS.event$gjCV), PROPS.trigger$zpYt));
            }
          })) {
            SNodeOperations.deleteNode(currentActivity);
            LoggingRuntime.logMsgView(Level.INFO, "Duplicate Activity", FixAll.class, null, null);
          }
        }
        // ............................................................. Resolve File / Playback 

        for (SNode actvt : ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.Activity$oQ, false, new SAbstractConcept[]{}))) {
          try {

            String path = System.getProperty("user.home") + "/MPS_ASTERISK";

            if (!(Files.exists(Paths.get(path)))) {
              new File(path).mkdir();
            }

            File tmp = new File(path + "/" + SPropertyOperations.getString(actvt, PROPS.playback$y04k));
            if ((tmp.isFile() && !(SPropertyOperations.getBoolean(actvt, PROPS.PBisFile$hBw1)))) {
              SPropertyOperations.assign(actvt, PROPS.PBisFile$hBw1, true);
            } else if (!(tmp.isFile()) && SPropertyOperations.getBoolean(actvt, PROPS.PBisFile$hBw1)) {
              SPropertyOperations.assign(actvt, PROPS.PBisFile$hBw1, false);
            }

          } catch (Exception e) {
          }
        }
        // ............................................................. Formating Path 

        if (isNotEmptyString(SPropertyOperations.getString(node, PROPS.default_path$_FMO))) {
          if (Objects.equals(SPropertyOperations.getString(node, PROPS.default_path$_FMO).charAt(0), '/')) {
            LoggingRuntime.logMsgView(Level.INFO, "/ Removed", FixAll.class, null, null);
            SPropertyOperations.assign(node, PROPS.default_path$_FMO, SPropertyOperations.getString(node, PROPS.default_path$_FMO).substring(1));
          }
          if (!(Objects.equals(SPropertyOperations.getString(node, PROPS.default_path$_FMO).charAt(SPropertyOperations.getString(node, PROPS.default_path$_FMO).length() - 1), '/'))) {
            LoggingRuntime.logMsgView(Level.INFO, "/ Added", FixAll.class, null, null);
            SPropertyOperations.assign(node, PROPS.default_path$_FMO, SPropertyOperations.getString(node, PROPS.default_path$_FMO) + "/");
          }
          while (SPropertyOperations.getString(node, PROPS.default_path$_FMO).contains("//")) {
            LoggingRuntime.logMsgView(Level.INFO, "// Replaced with /", FixAll.class, null, null);
            SPropertyOperations.assign(node, PROPS.default_path$_FMO, SPropertyOperations.getString(node, PROPS.default_path$_FMO).replaceAll("//", "/"));
          }
        }

        // ............................................................. Formating numbers 

        List<SNode> descendants = SNodeOperations.getNodeDescendants(node, CONCEPTS.DirectCall$7C, false, new SAbstractConcept[]{});
        if (ListSequence.fromList(descendants).isNotEmpty()) {
          for (SNode call : ListSequence.fromList(descendants)) {
            if (isNotEmptyString(SPropertyOperations.getString(call, PROPS.number$h6MF))) {
              SPropertyOperations.assign(call, PROPS.number$h6MF, SPropertyOperations.getString(call, PROPS.number$h6MF).replaceAll(" ", ""));
              LoggingRuntime.logMsgView(Level.INFO, "Direct call number formated", FixAll.class, null, null);
            }
          }

        }
        if (isNotEmptyString(SPropertyOperations.getString(node, PROPS.default_number$_FAH))) {
          SPropertyOperations.assign(node, PROPS.default_number$_FAH, SPropertyOperations.getString(node, PROPS.default_number$_FAH).replaceAll(" ", ""));
          LoggingRuntime.logMsgView(Level.INFO, "Default number formated", FixAll.class, null, null);
        }

        // ............................................................. Remove " " in Playback 

        List<SNode> ActivityDesc = SNodeOperations.getNodeDescendants(node, CONCEPTS.Activity$oQ, false, new SAbstractConcept[]{});
        for (SNode activity : ListSequence.fromList(ActivityDesc)) {
          if (isNotEmptyString(SPropertyOperations.getString(activity, PROPS.playback$y04k))) {
            if (Objects.equals(SPropertyOperations.getString(activity, PROPS.playback$y04k).charAt(0), ' ')) {
              SPropertyOperations.assign(activity, PROPS.playback$y04k, SPropertyOperations.getString(activity, PROPS.playback$y04k).substring(1));
            }
          }
        }
        if (isNotEmptyString(SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.timeout$3Y$V), PROPS.playback$OvLo))) {
          if (Objects.equals(SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.timeout$3Y$V), PROPS.playback$OvLo).charAt(0), ' ')) {
            SPropertyOperations.assign(SLinkOperations.getTarget(node, LINKS.timeout$3Y$V), PROPS.playback$OvLo, SPropertyOperations.getString(SLinkOperations.getTarget(node, LINKS.timeout$3Y$V), PROPS.playback$OvLo).substring(1));
          }
        }


        LoggingRuntime.logMsgView(Level.INFO, "FINISHED", FixAll.class, null, null);

        SelectionUtil.selectCell(editorContext, node, SelectionManager.FIRST_ERROR_CELL);

      }

    };
  }

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    CellAction originalDelete = editorCell.getAction(CellActionType.DELETE);
    CellAction originalBackspace = editorCell.getAction(CellActionType.BACKSPACE);

    // set actions that were actually defined 
    setDefinedCellActions(editorCell, node, context);

    // If we set a DELETE action but no BACKSPACE action, 
    // use the DELETE action for BACKSPACE as well. 
    CellAction deleteAction = editorCell.getAction(CellActionType.DELETE);
    CellAction backspaceAction = editorCell.getAction(CellActionType.BACKSPACE);
    if (deleteAction != originalDelete && backspaceAction == originalBackspace) {
      editorCell.setAction(CellActionType.BACKSPACE, deleteAction);
    }
  }

  public static void setDefinedCellActions(EditorCell editorCell, SNode node, EditorContext context) {

    // set cell actions from all imported action maps 

    // set cell actions defined directly in this action map 
    editorCell.setAction(CellActionType.CLICK, createAction_CLICK(node));

  }

  public static void setDefinedCellActionsOfType(EditorCell editorCell, SNode node, EditorContext context, CellActionType actionType) {

    // set cell action(s) of the given type from imported action maps 

    // set cell action of the given type defined directly in this action map 
    if (Objects.equals(actionType, CellActionType.CLICK)) {
      editorCell.setAction(actionType, createAction_CLICK(node));
    }
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Event$dL = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL, "jetbrains.mps.samples.VoiceMenu.structure.Event");
    /*package*/ static final SConcept Menu$bP = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde308L, "jetbrains.mps.samples.VoiceMenu.structure.Menu");
    /*package*/ static final SConcept Activity$oQ = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, "jetbrains.mps.samples.VoiceMenu.structure.Activity");
    /*package*/ static final SConcept Other$87 = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac9L, "jetbrains.mps.samples.VoiceMenu.structure.Other");
    /*package*/ static final SConcept Command$a6 = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x555e0967dab9863dL, "jetbrains.mps.samples.VoiceMenu.structure.Command");
    /*package*/ static final SConcept Empty$vd = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x555e0967dab9c5c3L, "jetbrains.mps.samples.VoiceMenu.structure.Empty");
    /*package*/ static final SConcept WorkSpace$ao = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L, "jetbrains.mps.samples.VoiceMenu.structure.WorkSpace");
    /*package*/ static final SConcept DirectCall$7C = MetaAdapterFactory.getConcept(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac8L, "jetbrains.mps.samples.VoiceMenu.structure.DirectCall");
  }

  private static final class PROPS {
    /*package*/ static final SProperty trigger$zpYt = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde30cL, 0x5b6b060cf3fde310L, "trigger");
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty playback$y04k = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, 0x25806c66fbe600f7L, "playback");
    /*package*/ static final SProperty PBisFile$hBw1 = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, 0x2e421f42b33aaf7fL, "PBisFile");
    /*package*/ static final SProperty default_path$_FMO = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L, 0x3df50e09c640babdL, "default_path");
    /*package*/ static final SProperty number$h6MF = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5dfe7d1339980ac8L, 0x6b5142eafcce13f1L, "number");
    /*package*/ static final SProperty default_number$_FAH = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L, 0x3df50e09c640bab9L, "default_number");
    /*package*/ static final SProperty playback$OvLo = MetaAdapterFactory.getProperty(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0xbed5e5797b645b9L, 0x34fad0c9f5b34402L, "playback");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink events$AIPs = MetaAdapterFactory.getContainmentLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde308L, 0x5b6b060cf3fde688L, "events");
    /*package*/ static final SReferenceLink event$gjCV = MetaAdapterFactory.getReferenceLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, 0x5b6b060cf3fe08f3L, "event");
    /*package*/ static final SContainmentLink activities$AJ0_ = MetaAdapterFactory.getContainmentLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde308L, 0x5b6b060cf3fde68aL, "activities");
    /*package*/ static final SContainmentLink commands$giUr = MetaAdapterFactory.getContainmentLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf3fde68dL, 0x5b6b060cf3fe08d2L, "commands");
    /*package*/ static final SContainmentLink bodyMenu$8UCv = MetaAdapterFactory.getContainmentLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L, 0x5b6b060cf40204ebL, "bodyMenu");
    /*package*/ static final SContainmentLink timeout$3Y$V = MetaAdapterFactory.getContainmentLink(0x4bc750d756884f52L, 0xb7d5b263a3393a24L, 0x5b6b060cf40204c8L, 0xbed5e5797b645beL, "timeout");
  }
}
